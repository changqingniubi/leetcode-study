/*
 * @Description: 
 * @Author: changqing
 * @Date: 2021-12-17 18:54:48
 * @LastEditTime: 2021-12-18 15:22:51
 * @LastEditors: changqing
 * @Usage: 
 */

// 对 s 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 s 。

//输入：s = "(()())(())"
//输出："()()()"
//解释：
//输入字符串为 "(()())(())"，原语化分解得到 "(()())" + "(())"，
//删除每个部分中的最外层括号后得到 "()()" + "()" = "()()()"。


//解题思路
//我们解决这道题的关键在于，需要知道哪些是需要去除的外层括号，为了找到这些需要去除的外层括号，我们可以使用到计数器。
//规则： 遇到左括号，我们的计数器 +1+1，遇到右括号，我们的计数器 -1−1。
//这样的话，一组连续且有效的括号，将不会对计数器的值产生变化。


//当前的计数值: 0 1 2 1 2 1 0 1
//            ( ( ) ( ) ) ( ) 
//遍历后计数值: 1 2 1 2 1 0 1 0

//根据上述两个示例，我们可以很快的找出规律：

//遇到左括号，当前计数值大于 0 ，则属于有效的左括号。
//遇到右括号，当前计数值大于 1 ，则属于有效的右括号。



var removeOuterParentheses = function(s) {
  let count = 0, stack = [];
    for (let i = 0; i < s.length; i++) {
        if(s[i] === '(' && count++ > 0) stack.push(s[i]);
        if(s[i] === ')' && count-- > 1) stack.push(s[i]);
    }
    return stack.join("");
};

console.log(removeOuterParentheses('(() ( ) ) ( ) '))
